// Generated by gencpp from file body_tracker_msgs/Skeleton.msg
// DO NOT EDIT!


#ifndef BODY_TRACKER_MSGS_MESSAGE_SKELETON_H
#define BODY_TRACKER_MSGS_MESSAGE_SKELETON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace body_tracker_msgs
{
template <class ContainerAllocator>
struct Skeleton_
{
  typedef Skeleton_<ContainerAllocator> Type;

  Skeleton_()
    : body_id(0)
    , tracking_status(0)
    , gesture(0)
    , position2D()
    , centerOfMass()
    , joint_position_head()
    , joint_position_neck()
    , joint_position_shoulder()
    , joint_position_spine_top()
    , joint_position_spine_mid()
    , joint_position_spine_bottom()
    , joint_position_left_shoulder()
    , joint_position_left_elbow()
    , joint_position_left_hand()
    , joint_position_right_shoulder()
    , joint_position_right_elbow()
    , joint_position_right_hand()  {
    }
  Skeleton_(const ContainerAllocator& _alloc)
    : body_id(0)
    , tracking_status(0)
    , gesture(0)
    , position2D(_alloc)
    , centerOfMass(_alloc)
    , joint_position_head(_alloc)
    , joint_position_neck(_alloc)
    , joint_position_shoulder(_alloc)
    , joint_position_spine_top(_alloc)
    , joint_position_spine_mid(_alloc)
    , joint_position_spine_bottom(_alloc)
    , joint_position_left_shoulder(_alloc)
    , joint_position_left_elbow(_alloc)
    , joint_position_left_hand(_alloc)
    , joint_position_right_shoulder(_alloc)
    , joint_position_right_elbow(_alloc)
    , joint_position_right_hand(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _body_id_type;
  _body_id_type body_id;

   typedef int32_t _tracking_status_type;
  _tracking_status_type tracking_status;

   typedef int32_t _gesture_type;
  _gesture_type gesture;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _position2D_type;
  _position2D_type position2D;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _centerOfMass_type;
  _centerOfMass_type centerOfMass;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_head_type;
  _joint_position_head_type joint_position_head;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_neck_type;
  _joint_position_neck_type joint_position_neck;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_shoulder_type;
  _joint_position_shoulder_type joint_position_shoulder;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_spine_top_type;
  _joint_position_spine_top_type joint_position_spine_top;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_spine_mid_type;
  _joint_position_spine_mid_type joint_position_spine_mid;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_spine_bottom_type;
  _joint_position_spine_bottom_type joint_position_spine_bottom;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_left_shoulder_type;
  _joint_position_left_shoulder_type joint_position_left_shoulder;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_left_elbow_type;
  _joint_position_left_elbow_type joint_position_left_elbow;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_left_hand_type;
  _joint_position_left_hand_type joint_position_left_hand;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_right_shoulder_type;
  _joint_position_right_shoulder_type joint_position_right_shoulder;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_right_elbow_type;
  _joint_position_right_elbow_type joint_position_right_elbow;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_right_hand_type;
  _joint_position_right_hand_type joint_position_right_hand;





  typedef boost::shared_ptr< ::body_tracker_msgs::Skeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::body_tracker_msgs::Skeleton_<ContainerAllocator> const> ConstPtr;

}; // struct Skeleton_

typedef ::body_tracker_msgs::Skeleton_<std::allocator<void> > Skeleton;

typedef boost::shared_ptr< ::body_tracker_msgs::Skeleton > SkeletonPtr;
typedef boost::shared_ptr< ::body_tracker_msgs::Skeleton const> SkeletonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::body_tracker_msgs::Skeleton_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace body_tracker_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'body_tracker_msgs': ['/home/ncls/catkin_ws/src/body_tracker_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::body_tracker_msgs::Skeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::body_tracker_msgs::Skeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::body_tracker_msgs::Skeleton_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ccf81ce06b8e4b357ba011ca33898c6";
  }

  static const char* value(const ::body_tracker_msgs::Skeleton_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ccf81ce06b8e4b3ULL;
  static const uint64_t static_value2 = 0x57ba011ca33898c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "body_tracker_msgs/Skeleton";
  }

  static const char* value(const ::body_tracker_msgs::Skeleton_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header header # I CANT GET THIS TO COMPILE!\n\
\n\
int32 body_id\n\
int32 tracking_status\n\
int32 gesture\n\
\n\
geometry_msgs/Point32 position2D # x,y in camera frame, z distance from camera\n\
\n\
geometry_msgs/Point32 centerOfMass\n\
\n\
#Position of interesting joints\n\
geometry_msgs/Point32 joint_position_head\n\
geometry_msgs/Point32 joint_position_neck\n\
geometry_msgs/Point32 joint_position_shoulder\n\
geometry_msgs/Point32 joint_position_spine_top\n\
geometry_msgs/Point32 joint_position_spine_mid\n\
geometry_msgs/Point32 joint_position_spine_bottom\n\
\n\
geometry_msgs/Point32 joint_position_left_shoulder\n\
geometry_msgs/Point32 joint_position_left_elbow\n\
geometry_msgs/Point32 joint_position_left_hand\n\
\n\
geometry_msgs/Point32 joint_position_right_shoulder\n\
geometry_msgs/Point32 joint_position_right_elbow\n\
geometry_msgs/Point32 joint_position_right_hand\n\
\n\
# Robot is usually too close to see legs, and not very interesting\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::body_tracker_msgs::Skeleton_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.body_id);
      stream.next(m.tracking_status);
      stream.next(m.gesture);
      stream.next(m.position2D);
      stream.next(m.centerOfMass);
      stream.next(m.joint_position_head);
      stream.next(m.joint_position_neck);
      stream.next(m.joint_position_shoulder);
      stream.next(m.joint_position_spine_top);
      stream.next(m.joint_position_spine_mid);
      stream.next(m.joint_position_spine_bottom);
      stream.next(m.joint_position_left_shoulder);
      stream.next(m.joint_position_left_elbow);
      stream.next(m.joint_position_left_hand);
      stream.next(m.joint_position_right_shoulder);
      stream.next(m.joint_position_right_elbow);
      stream.next(m.joint_position_right_hand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Skeleton_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::body_tracker_msgs::Skeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::body_tracker_msgs::Skeleton_<ContainerAllocator>& v)
  {
    s << indent << "body_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.body_id);
    s << indent << "tracking_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tracking_status);
    s << indent << "gesture: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gesture);
    s << indent << "position2D: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.position2D);
    s << indent << "centerOfMass: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.centerOfMass);
    s << indent << "joint_position_head: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_head);
    s << indent << "joint_position_neck: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_neck);
    s << indent << "joint_position_shoulder: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_shoulder);
    s << indent << "joint_position_spine_top: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_spine_top);
    s << indent << "joint_position_spine_mid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_spine_mid);
    s << indent << "joint_position_spine_bottom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_spine_bottom);
    s << indent << "joint_position_left_shoulder: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_left_shoulder);
    s << indent << "joint_position_left_elbow: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_left_elbow);
    s << indent << "joint_position_left_hand: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_left_hand);
    s << indent << "joint_position_right_shoulder: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_right_shoulder);
    s << indent << "joint_position_right_elbow: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_right_elbow);
    s << indent << "joint_position_right_hand: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_right_hand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BODY_TRACKER_MSGS_MESSAGE_SKELETON_H
