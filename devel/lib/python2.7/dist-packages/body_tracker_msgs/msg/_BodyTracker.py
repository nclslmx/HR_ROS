# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from body_tracker_msgs/BodyTracker.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class BodyTracker(genpy.Message):
  _md5sum = "5fee6a28da28b41e53df055348e02173"
  _type = "body_tracker_msgs/BodyTracker"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32  body_id
int32  tracking_status
int32  gesture
bool   face_found

# 2d face bounding Box position in pixels from 0,0 (top left of image)
int32  face_left
int32  face_top
int32  face_width
int32  face_height
int32  age     # rough estimate of persons age
int32  gender  # 0 = unknown, 1 = male, 2 = female
string name    # if match for persons face found in database

geometry_msgs/Point32 position2d   # body x,y in camera frame, z = range from camera
geometry_msgs/Point32 position3d   # body x,y,z in world coordinates
geometry_msgs/Point32 face_center  # face x,y in camera frame, z = range from camera


================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['body_id','tracking_status','gesture','face_found','face_left','face_top','face_width','face_height','age','gender','name','position2d','position3d','face_center']
  _slot_types = ['int32','int32','int32','bool','int32','int32','int32','int32','int32','int32','string','geometry_msgs/Point32','geometry_msgs/Point32','geometry_msgs/Point32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       body_id,tracking_status,gesture,face_found,face_left,face_top,face_width,face_height,age,gender,name,position2d,position3d,face_center

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BodyTracker, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.body_id is None:
        self.body_id = 0
      if self.tracking_status is None:
        self.tracking_status = 0
      if self.gesture is None:
        self.gesture = 0
      if self.face_found is None:
        self.face_found = False
      if self.face_left is None:
        self.face_left = 0
      if self.face_top is None:
        self.face_top = 0
      if self.face_width is None:
        self.face_width = 0
      if self.face_height is None:
        self.face_height = 0
      if self.age is None:
        self.age = 0
      if self.gender is None:
        self.gender = 0
      if self.name is None:
        self.name = ''
      if self.position2d is None:
        self.position2d = geometry_msgs.msg.Point32()
      if self.position3d is None:
        self.position3d = geometry_msgs.msg.Point32()
      if self.face_center is None:
        self.face_center = geometry_msgs.msg.Point32()
    else:
      self.body_id = 0
      self.tracking_status = 0
      self.gesture = 0
      self.face_found = False
      self.face_left = 0
      self.face_top = 0
      self.face_width = 0
      self.face_height = 0
      self.age = 0
      self.gender = 0
      self.name = ''
      self.position2d = geometry_msgs.msg.Point32()
      self.position3d = geometry_msgs.msg.Point32()
      self.face_center = geometry_msgs.msg.Point32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3iB6i().pack(_x.body_id, _x.tracking_status, _x.gesture, _x.face_found, _x.face_left, _x.face_top, _x.face_width, _x.face_height, _x.age, _x.gender))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9f().pack(_x.position2d.x, _x.position2d.y, _x.position2d.z, _x.position3d.x, _x.position3d.y, _x.position3d.z, _x.face_center.x, _x.face_center.y, _x.face_center.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position2d is None:
        self.position2d = geometry_msgs.msg.Point32()
      if self.position3d is None:
        self.position3d = geometry_msgs.msg.Point32()
      if self.face_center is None:
        self.face_center = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.body_id, _x.tracking_status, _x.gesture, _x.face_found, _x.face_left, _x.face_top, _x.face_width, _x.face_height, _x.age, _x.gender,) = _get_struct_3iB6i().unpack(str[start:end])
      self.face_found = bool(self.face_found)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.position2d.x, _x.position2d.y, _x.position2d.z, _x.position3d.x, _x.position3d.y, _x.position3d.z, _x.face_center.x, _x.face_center.y, _x.face_center.z,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3iB6i().pack(_x.body_id, _x.tracking_status, _x.gesture, _x.face_found, _x.face_left, _x.face_top, _x.face_width, _x.face_height, _x.age, _x.gender))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9f().pack(_x.position2d.x, _x.position2d.y, _x.position2d.z, _x.position3d.x, _x.position3d.y, _x.position3d.z, _x.face_center.x, _x.face_center.y, _x.face_center.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position2d is None:
        self.position2d = geometry_msgs.msg.Point32()
      if self.position3d is None:
        self.position3d = geometry_msgs.msg.Point32()
      if self.face_center is None:
        self.face_center = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.body_id, _x.tracking_status, _x.gesture, _x.face_found, _x.face_left, _x.face_top, _x.face_width, _x.face_height, _x.age, _x.gender,) = _get_struct_3iB6i().unpack(str[start:end])
      self.face_found = bool(self.face_found)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.position2d.x, _x.position2d.y, _x.position2d.z, _x.position3d.x, _x.position3d.y, _x.position3d.z, _x.face_center.x, _x.face_center.y, _x.face_center.z,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3iB6i = None
def _get_struct_3iB6i():
    global _struct_3iB6i
    if _struct_3iB6i is None:
        _struct_3iB6i = struct.Struct("<3iB6i")
    return _struct_3iB6i
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
